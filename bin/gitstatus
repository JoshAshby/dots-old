#!/usr/bin/env ruby

require "rugged"

class GitStatus
  ICONS = [
    [:branch, "  "],
    [:ahead, "↑ "],
    # [:behind, ""]
    [:staged, "● "],
    [:unstaged, "○ "],
    [:untracked, "ᚐ "],
    [:unmerged, "✕ "]
  ].freeze

  def run
    return unless repository && repository&.head

    output = ICONS.flat_map do |name, icon|
      extra = send name

      next unless extra
      next icon unless extra.kind_of? String

      [ icon, extra, " " ]
    end

    output.compact!

    print output.join("")

  rescue Rugged::ReferenceError
    print " ✕ ref 404 "
    return
  end

  private

  def repository
    @repository ||= Rugged::Repository.discover Dir.pwd
  rescue Rugged::RepositoryError
    nil
  end

  def status
    @status ||= Hash.new { |hash, key| hash[key] = 0 }.tap do |hash|
      # TODO: this is causing a problem with segfaulting when the repo is in
      # some weird state
      next

      repository.status do |path, data|
        next if data.include? :ignored

        data.each { |type| hash[type] += 1 }
      end
    end
  end

  def branch
    repository.head.name.gsub(%r{refs\/heads\/}, "")
  end

  def _ahead_behind
    remote = repository.refs.find(&:remote?)
    return [0, 0] unless remote

    remote_ref = remote.target
    remote_ref = remote_ref.resolve.target if remote_ref.is_a? Rugged::Reference

    repository.ahead_behind(repository.head.target, remote_ref)
  end

  def ahead_behind
    @ahead_behind ||= _ahead_behind
  end

  def ahead
    ahead_behind[0] > 0
  end

  def behind
    ahead_behind[1] > 0
  end

  def staged
    [:index_modified, :index_deleted, :index_new].sum { |key| status[key] } > 0
  end

  def unstaged
    [:worktree_modified, :worktree_deleted].sum { |key| status[key] } > 0
  end

  def untracked
    status[:worktree_new] > 0
  end

  def unmerged
    # binding.pry
  end
end

GitStatus.new.run if __FILE__ == $0
